#!/usr/bin/env python3
"""Generate NeoVim queries.

Everything in `queries/` uses tree-sitter syntax, as defined at
<https://tree-sitter.github.io/tree-sitter/syntax-highlighting#theme>. However, NVim
has a slightly different syntax.

This file performs conversions so two sets of files don't need to be maintained.

<https://docs.helix-editor.com/master/themes.html#syntax-highlighting> has a bit better
guide for these parameters than tree-sitter does.
    
"""

import re
from glob import glob
from pathlib import Path

REPLACEMENTS = [
    ("@local.definition", "@definition"),
    ("@local.reference", "@reference"),
    ("@local.scope", "@scope"),
    ("@constants.builtin.boolean", "@boolean"),
    ("@keyword.control.conditional", "@conditional"),
    ("@variable.parameter", "@parameter"),
    ("@comment.line", "@comment"),
    ("@constant.character.escape", "@string.escape"),
]

REPLACEMENTS_RE = [
    (r"^[^;] ?(.*;\s*NVIM-DISABLE)$", "", re.MULTILINE),
    (r"^; ?(.*;\s*NVIM-ENABLE)$", r"\1", re.MULTILINE),
]


def main():
    sources = glob("queries-src/*.scm")
    for fname in sources:
        contents = "; File autogenerated by build-queries-nvim.py; do not edit\n\n"

        with open(fname) as f:
            contents += f.read()

        for query, sub in REPLACEMENTS:
            contents = contents.replace(query, sub)

        for query, sub, flags in REPLACEMENTS_RE:
            contents = re.sub(query, sub, contents, flags=flags)

        dest = Path("queries") / "just" / Path(fname).name
        with open(dest, "w") as f:
            f.write(contents)


if __name__ == "__main__":
    main()
