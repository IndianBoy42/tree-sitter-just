================================================================================
empty
================================================================================

--------------------------------------------------------------------------------

(source_file
  (item
    (eol)))

================================================================================
assignment
================================================================================

foo := "abc"

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (string_literal)))
      (eol)))
  (item
    (eol)))

================================================================================
expression
================================================================================

foo := "abc" + 'def'

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (string_literal))
        (value
          (raw_string_literal)))
      (eol)))
  (item
    (eol)))

================================================================================
paths
================================================================================

relative := "abc" / 'def'
absolute := / "abc"
combined := "foo" / bar() / baz

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (string_literal))
        (value
          (raw_string_literal)))
      (eol)))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (string_literal)))
      (eol)))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (string_literal))
        (value
          (function_call
            (identifier)))
        (value
          (identifier)))
      (eol)))
  (item
    (eol)))

================================================================================
basic strings
================================================================================

foo := "a"
bar := "b
  c
"
baz := "a\"\t"

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (string_literal)))
      (eol)))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (string_literal)))
      (eol)))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (string_literal
            (escape_sequence)
            (escape_sequence))))
      (eol)))
  (item
    (eol)))

================================================================================
indented basic strings
================================================================================

foo := """a"""
bar:= """b
  c
"""
baz := """
abc \t
def \"
"""

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (string_literal)))
      (eol)))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (string_literal)))
      (eol)))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (string_literal
            (escape_sequence)
            (escape_sequence))))
      (eol)))
  (item
    (eol)))

================================================================================
raw strings
================================================================================

foo := 'a'
bar := 'b
  c
'
baz := 'a\"\t'

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (raw_string_literal)))
      (eol)))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (raw_string_literal)))
      (eol)))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (raw_string_literal)))
      (eol)))
  (item
    (eol)))

================================================================================
indented raw strings
================================================================================

foo := '''a'''
bar:= '''b
  c
'''
baz := '''
  abc \t
  def \"
'''

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (raw_string_literal)))
      (eol)))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (raw_string_literal)))
      (eol)))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (raw_string_literal)))
      (eol)))
  (item
    (eol)))

================================================================================
backticks
================================================================================

foo := `echo hi`
bar := `echo hi
  echo bye
`

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (external_command
            (command_body))))
      (eol)))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (external_command
            (command_body))))
      (eol)))
  (item
    (eol)))

================================================================================
indented backticks
================================================================================

foo := ```echo hi```
bar := ```
echo bye  
```
--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (external_command
            (command_body))))
      (eol)))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (external_command
            (command_body))))
      (eol))))

================================================================================
if
================================================================================

foo := if bar == baz { qux } else { quux }

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (assignment
      (identifier)
      (expression
        (if_expression
          (condition
            (expression
              (value
                (identifier)))
            (expression
              (value
                (identifier))))
          (expression
            (value
              (identifier)))
          (expression
            (value
              (identifier)))))
      (eol)))
  (item
    (eol)))

================================================================================
else if
================================================================================

foo := if a == "x" {
  "val"
} else if "1" != "2" {
  foo_fn("val")
} else if "3" == "4" {
  if some_bool { val }
} else { val }

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (assignment
      (identifier)
      (expression
        (if_expression
          (condition
            (expression
              (value
                (identifier)))
            (expression
              (value
                (string_literal))))
          (expression
            (value
              (string_literal)))
          (condition
            (expression
              (value
                (string_literal)))
            (expression
              (value
                (string_literal))))
          (expression
            (value
              (function_call
                (identifier)
                (sequence
                  (expression
                    (value
                      (string_literal)))))))
          (condition
            (expression
              (value
                (string_literal)))
            (expression
              (value
                (string_literal))))
          (expression
            (if_expression
              (condition
                (expression
                  (value
                    (identifier))))
              (expression
                (value
                  (identifier)))))
          (expression
            (value
              (identifier)))))
      (eol)))
  (item
    (eol)))

================================================================================
function
================================================================================

foo := some_fn("param1", param2)

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (function_call
            (identifier)
            (sequence
              (expression
                (value
                  (string_literal)))
              (expression
                (value
                  (identifier)))))))
      (eol)))
  (item
    (eol)))

================================================================================
export
================================================================================

export foo := "abc"

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (export
      (assignment
        (identifier)
        (expression
          (value
            (string_literal)))
        (eol))))
  (item
    (eol)))

================================================================================
import
================================================================================

import 'foo/bar.just'
import? 'baz.just'

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (import
      (raw_string_literal)))
  (item
    (eol))
  (item
    (import
      (raw_string_literal)))
  (item
    (eol))
  (item
    (eol)))

================================================================================
modules
================================================================================

mod foo
mod bar 'PATH'
mod? baz
mod? qux "PATH"

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (module
      (identifier)))
  (item
    (eol))
  (item
    (module
      (identifier)
      (raw_string_literal)))
  (item
    (eol))
  (item
    (module
      (identifier)))
  (item
    (eol))
  (item
    (module
      (identifier)
      (string_literal)))
  (item
    (eol))
  (item
    (eol)))

================================================================================
set
================================================================================

set SOME_BOOL
set FOO := true
set dotenv-load
set tempdir := "/tmp/just"
set shell := ["powershell.exe", "-c"]

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (setting
      (identifier)
      (eol)))
  (item
    (setting
      (identifier)
      (boolean)
      (eol)))
  (item
    (setting
      (identifier)
      (eol)))
  (item
    (setting
      (identifier)
      (string_literal)
      (eol)))
  (item
    (setting
      (string_literal)
      (string_literal)
      (eol)))
  (item
    (eol)))

================================================================================
comment
================================================================================

# comment
foo := bar # + baz

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (eol
      (comment)))
  (item
    (assignment
      (identifier)
      (expression
        (value
          (identifier)))
      (eol
        (comment))))
  (item
    (eol)))

================================================================================
shebang
================================================================================

#!/usr/bin/env just

foo:
  body

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (eol
      (comment)))
  (item
    (recipe
      (recipe_header
        (identifier))
      (recipe_body
        (recipe_line
          (text)))))
  (item
    (eol)))

================================================================================
regex literal
================================================================================

foo_re := if ".JUSTFILE" =~ '(?i)\.?just(?:file)?' { "match" } else { "mismatch" }

--------------------------------------------------------------------------------

(source_file
  (item
    (eol))
  (item
    (assignment
      (identifier)
      (expression
        (if_expression
          (condition
            (expression
              (value
                (string_literal)))
            (regex_literal
              (raw_string_literal)))
          (expression
            (value
              (string_literal)))
          (expression
            (value
              (string_literal)))))
      (eol)))
  (item
    (eol)))
