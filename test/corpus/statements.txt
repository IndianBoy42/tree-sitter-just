================================================================================
assignment
================================================================================

foo := "abc"

--------------------------------------------------------------------------------

(source_file
  (item
    (eol
      (NEWLINE)))
  (item
    (assignment
      (NAME)
      (expression
        (value
          (string
            (STRING))))
      (eol
        (NEWLINE)))))

================================================================================
expression
================================================================================

foo := "abc" + 'def'

--------------------------------------------------------------------------------

(source_file
  (item
    (eol
      (NEWLINE)))
  (item
    (assignment
      (NAME)
      (expression
        (value
          (string
            (STRING)))
        (expression
          (value
            (string
              (RAW_STRING)))))
      (eol
        (NEWLINE)))))

================================================================================
paths
================================================================================

relative := "abc" / 'def'
absolute := / "abc"
combined := "foo" / bar() / baz

--------------------------------------------------------------------------------

(source_file
  (item
    (eol
      (NEWLINE)))
  (item
    (assignment
      (NAME)
      (expression
        (value
          (string
            (STRING)))
        (expression
          (value
            (string
              (RAW_STRING)))))
      (eol
        (NEWLINE))))
  (item
    (assignment
      (NAME)
      (expression
        (value
          (cmd
            (MISSING BACKTICK)))
        (expression
          (value
            (string
              (STRING)))))
      (eol
        (NEWLINE))))
  (item
    (assignment
      (NAME)
      (expression
        (value
          (string
            (STRING)))
        (expression
          (value
            (call
              (NAME)))
          (expression
            (value
              (NAME)))))
      (eol
        (NEWLINE)))))

================================================================================
strings FIXME(escapes) XFAIL from escapes
================================================================================

foo := "a"
bar := 'b'
baz := "c
d"
qux := """e
f"""
quux := '''g
h
i
'''
corge := "foo\"bar"

--------------------------------------------------------------------------------

(source_file
  (item
    (eol
      (NEWLINE)))
  (item
    (assignment
      (NAME)
      (expression
        (value
          (string
            (STRING))))
      (eol
        (NEWLINE))))
  (item
    (assignment
      (NAME)
      (expression
        (value
          (string
            (RAW_STRING))))
      (eol
        (NEWLINE))))
  (item
    (assignment
      (NAME)
      (expression
        (value
          (string
            (STRING))))
      (eol
        (NEWLINE))))
  (item
    (assignment
      (NAME)
      (expression
        (value
          (string
            (INDENTED_STRING))))
      (eol
        (NEWLINE))))
  (item
    (assignment
      (NAME)
      (expression
        (value
          (string
            (INDENTED_RAW_STRING))))
      (eol
        (NEWLINE))))
  (ERROR
    (NAME)
    (ERROR
      (value
        (string
          (STRING))))
    (NAME)
    (INDENT)
    (UNEXPECTED '\0')))

================================================================================
if
================================================================================

foo := if a == "x" {
  "val"
} else if "1" != "2" { foo_fn("val") }
} else { val }

--------------------------------------------------------------------------------

(source_file
  (item
    (eol
      (NEWLINE)))
  (ERROR
    (NAME)
    (condition
      (expression
        (value
          (NAME)))
      (expression
        (value
          (string
            (STRING)))))
    (ERROR
      (expression
        (value
          (string
            (STRING)))))
    (expression
      (condition
        (expression
          (value
            (string
              (STRING))))
        (expression
          (value
            (string
              (STRING)))))
      (expression
        (value
          (call
            (NAME)
            (sequence
              (expression
                (value
                  (string
                    (STRING))))))))
      (ERROR
        (NEWLINE))
      (expression
        (value
          (NAME)))))
  (item
    (eol
      (NEWLINE))))

================================================================================
function
================================================================================

foo := some_fn("param1", param2)

--------------------------------------------------------------------------------

(source_file
  (item
    (eol
      (NEWLINE)))
  (item
    (assignment
      (NAME)
      (expression
        (value
          (call
            (NAME)
            (sequence
              (expression
                (value
                  (string
                    (STRING))))
              (sequence
                (expression
                  (value
                    (NAME))))))))
      (eol
        (NEWLINE)))))

================================================================================
export
================================================================================

export foo := "abc"

--------------------------------------------------------------------------------

(source_file
  (item
    (eol
      (NEWLINE)))
  (item
    (export
      (assignment
        (NAME)
        (expression
          (value
            (string
              (STRING))))
        (eol
          (NEWLINE))))))

================================================================================
import
================================================================================

import 'foo/bar.just'
import? 'baz.just'

--------------------------------------------------------------------------------

(source_file
  (item
    (eol
      (NEWLINE)))
  (item
    (import
      (string
        (RAW_STRING))))
  (item
    (eol
      (NEWLINE)))
  (item
    (import
      (string
        (RAW_STRING))))
  (item
    (eol
      (NEWLINE))))

================================================================================
modules
================================================================================

mod foo
mod bar 'PATH'
mod? baz
mod? qux "PATH"

--------------------------------------------------------------------------------

(source_file
  (item
    (eol
      (NEWLINE)))
  (item
    (module
      (NAME)))
  (item
    (eol
      (NEWLINE)))
  (item
    (module
      (NAME)
      (string
        (RAW_STRING))))
  (item
    (eol
      (NEWLINE)))
  (item
    (module
      (NAME)))
  (item
    (eol
      (NEWLINE)))
  (item
    (module
      (NAME)
      (string
        (STRING))))
  (item
    (eol
      (NEWLINE))))

================================================================================
set
================================================================================

set SOME_BOOL
set FOO := true
set dotenv-load
set tempdir := "/tmp/just"
set shell := ["powershell.exe", "-c"]

--------------------------------------------------------------------------------

(source_file
  (item
    (eol
      (NEWLINE)))
  (item
    (setting
      (NAME)
      (eol
        (NEWLINE))))
  (item
    (setting
      (NAME)
      (boolean)
      (eol
        (NEWLINE))))
  (item
    (setting
      (NAME)
      (eol
        (NEWLINE))))
  (item
    (setting
      (NAME)
      (string
        (STRING))
      (eol
        (NEWLINE))))
  (item
    (setting
      (string
        (STRING))
      (string
        (STRING))
      (eol
        (NEWLINE)))))

================================================================================
comment
================================================================================

# comment
foo := bar # + baz

--------------------------------------------------------------------------------

(source_file
  (item
    (eol
      (NEWLINE)))
  (item
    (eol
      (comment
        (NEWLINE))))
  (item
    (assignment
      (NAME)
      (expression
        (value
          (NAME)))
      (eol
        (comment
          (NEWLINE))))))

================================================================================
shebang
================================================================================

#!/usr/bin/env just

foo:
  body

--------------------------------------------------------------------------------

(source_file
  (item
    (eol
      (NEWLINE)))
  (item
    (eol
      (comment
        (NEWLINE))))
  (item
    (recipe
      (recipe_header
        (NAME))
      (NEWLINE)
      (body
        (INDENT)
        (recipe_body
          (line
            (recipeline
              (notcomment)
              (NEWLINE))))
        (DEDENT)))))
